import lib.sys.syscall

// standard file descriptor
let FD_STDIN  = 0 as USize
let FD_STDOUT = 1 as USize
let FD_STDERR = 2 as USize

// IO object
public struct IO {}
public let io: IO = [IO] {}

// put character
public def putChar(this: IO&, c: u8) {
  write(c)
}

// get character
public def getChar(this: IO&): u8 {
  var c: u8
  read(FD_STDIN, &c, 1 as USize)
  c
}

// print string
public def printString(this: IO&, str: u8*) {
  var s = str
  while *s != '\0' {
    this.putChar(*s)
    s += 1
  }
}

// print integer in specific base
public def printInt(this: IO&, int: u32, base: i32) {
  var buf: u8[32], len = 0, digit: u32
  if !int {
    buf[0] = '0'
    len = 1
  }
  else {
    let b = base as u32
    var n = int
    while n != 0 as u32 {
      digit = n % b
      n /= b
      buf[len] = if digit < 10 as u32 {
        '0' + digit as u8
      }
      else {
        'a' + (digit - 10 as u32) as u8
      }
      len += 1
    }
  }
  while len > 0 {
    len -= 1
    this.putChar(buf[len])
  }
}

// print character
public def <<<(this: IO&, c: u8): IO& {
  this.putChar(c)
  this
}

// print string
public def <<<(this: IO&, str: u8*): IO& {
  this.printString(str)
  this
}

// print signed integer (decimal)
public def <<<(this: IO&, int: i32): IO& {
  var i = int
  if i < 0 {
    this.putChar('-')
    i = -i
  }
  this.printInt(i as u32, 10)
  this
}

// print unsigned integer (decimal)
public def <<<(this: IO&, int: u32): IO& {
  this.printInt(int, 10)
  this
}

// print signed integer (hexadecimal)
public def <<$(this: IO&, int: i32): IO& {
  var i = int
  if i < 0 {
    this.putChar('-')
    i = -i
  }
  this.printInt(i as u32, 16)
  this
}

// print unsigned integer (hexadecimal)
public def <<$(this: IO&, int: u32): IO& {
  this.printInt(int, 16)
  this
}

// print boolean
public def <<<(this: IO&, b: bool): IO& {
  if b {
    this.printString("true")
  }
  else {
    this.printString("false")
  }
  this
}
