public import define.context

import arch.arch
import arch.riscv.csr
import lib.io
import lib.except
import proc.thread

// trap handler in 'traphand.S'
extern declare _handleTrap: ()

// tick of timer
var tick = 0 as USize

// handle timer interrupt
def handleTimer() {
  tick += 1 as USize
  if tick % 100 as USize == 0 as USize {
    io <<< "100 ticks!\n"
  }
  // tell processor a tick passed
  tick()
  // acknowledge soft interrupt
  setSip(getSip() & ~SIE_SSIE)
}

// handle page fault
def handlePageFault(tf: TrapFrame var&) {
  io <<< "scause  = " <<< tf.scause <<< '\n'
  io <<< "stval   = 0x"; io.printInt(tf.stval, 16); io <<< '\n'
  panic("page fault!")
}

// initialize trap handling
public def initTrap() {
  setSscratch(0 as USize)
  setStvec(_handleTrap as USize)
  setIntrOn()
}

// trap handler
extern def handleTrap(tf: TrapFrame var&) {
  when tf.scause {
    TRAP_S_SOFT_INT {
      handleTimer()
    }
    TRAP_INST_FAULT, TRAP_LOAD_FAULT, TRAP_STORE_FAULT {
      handlePageFault(tf)
    }
    else {
      io <<< "sstatus = 0x"; io.printInt(tf.sstatus, 16); io <<< '\n'
      io <<< "sepc    = 0x"; io.printInt(tf.sepc, 16); io <<< '\n'
      io <<< "scause  = " <<< tf.scause <<< '\n'
      io <<< "stval   = 0x"; io.printInt(tf.stval, 16); io <<< '\n'
      panic("uexpected trap!")
    }
  }
}
