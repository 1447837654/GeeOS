public import arch.arch
public import define.context

import proc.proc
import fs.fs
import lib.io

// definitions of system call id
let SYS_OPEN  = 56 as USize
let SYS_CLOSE = 57 as USize
let SYS_READ  = 63 as USize
let SYS_WRITE = 64 as USize
let SYS_EXIT  = 93 as USize
let SYS_EXEC  = 221 as USize


def sysOpen(path: u8*, flags: i32): ISize {
  var fds: FileInfo var& = getCurrentThread().getFds()
  fds.lock()
  // allocate a new file descriptor & open file
  var fd: i32
  if !fds.allocFd(fd) || (*fds.getFile(fd)).open(path, flags) < 0 {
    fd = -1
  }
  fds.unlock()
  fd as ISize
}

def sysClose(fd: i32): ISize {
  var fds: FileInfo var& = getCurrentThread().getFds(), ret = -1
  fds.lock()
  // get file by descriptor
  let file = fds.getFile(fd)
  if file != null as File var* {
    // close file & deallocate file descriptor
    ret = (*file).close()
    if ret >= 0 { fds.deallocFd(fd) }
  }
  fds.unlock()
  ret as ISize
}

def sysRead(fd: i32, buf: u8 var*, len: USize): ISize {
  // check if is standard input
  if fd == 0 {
    *buf = stdin.pop()
    1 as ISize
  }
  else {
    var fds: FileInfo var& = getCurrentThread().getFds(), ret = -1
    fds.lock()
    // get file by descriptor
    let file = fds.getFile(fd)
    if file != null as File var* {
      // read file
      ret = (*file).read(buf, len)
    }
    fds.unlock()
    ret as ISize
  }
}

def sysWrite(fd: i32, buf: u8*, len: USize): ISize {
  // check if is standard output/error
  if fd == 1 || fd == 2 {
    var i = 0
    while i as USize < len {
      io.putChar(buf[i])
      i += 1
    }
    i as ISize
  }
  else {
    var fds: FileInfo var& = getCurrentThread().getFds(), ret = -1
    fds.lock()
    // get file by descriptor
    let file = fds.getFile(fd)
    if file != null as File var* {
      // write file
      ret = (*file).write(buf, len)
    }
    fds.unlock()
    ret as ISize
  }
}

def sysExit(code: USize): ISize {
  // TODO: remove this log
  io <<< "user thread has exited!\n"
  exit(code)
  0 as ISize
}

def sysExec(path: u8*): ISize {
  if execute(path, getCurrentTid()) {
    sleep()
    0 as ISize
  }
  else {
    -1 as ISize
  }
}

// perform system call
public def runSyscall(tf: TrapFrame var&): ISize {
  when tf.x[17] {
    SYS_OPEN { sysOpen(tf.x[10] as u8*, tf.x[11] as i32) }
    SYS_CLOSE { sysClose(tf.x[10] as i32) }
    SYS_READ {
      sysRead(tf.x[10] as i32, tf.x[11] as u8 var*, tf.x[12] as USize)
    }
    SYS_WRITE {
      sysWrite(tf.x[10] as i32, tf.x[11] as u8*, tf.x[12] as USize)
    }
    SYS_EXIT { sysExit(tf.x[10]) }
    SYS_EXEC { sysExec(tf.x[10] as u8*) }
    else {
      io <<< "unknown user system call! id = " <<< tf.x[17] <<< '\n'
      -1 as ISize
    }
  }
}
