import proc.thread
import fs.file
import fs.vfs.vfs
import fs.consts


// some helper functions
// get file descriptor by `fd`
def getCurrentFile(fd: i32): File var* {
  let file_info: FileInfo var& = getCurrentThread().getFileInfo()
  var file_ptr: File var*
  if file_info.findFile(fd, file_ptr) {
    file_ptr
  }
  else {
    null as File var*
  }
}


// interface of general file system
// file system related system calls will use this implementation

public def initFileSystem() {
  initVfs()
  // TODO: initialize other stuffs
}

public def cleanUpFileSystem() {
  cleanUpVfs()
}

// open/create a file by path, returns file descriptor
public def openFile(path: u8*, flags: u32): i32 {
  // get flags
  var readable = false, writable = false
  when flags as i32 & O_ACCMODE {
    O_RDONLY {
      readable = true
    }
    O_WRONLY {
      writable = true
    }
    O_RDWR {
      readable = true
      writable = true
    }
    else {
      return -1
    }
  }
  // allocate new file descriptor
  let file_info: FileInfo var& = getCurrentThread().getFileInfo()
  var file_ptr: File var*, file: File var& = *file_ptr
  if !file_info.allocFile(file_ptr) {
    return -1
  }
  // try to open file
  var node: INode var*
  let ret = vfsOpen(path, flags, node)
  if ret != 0 {
    file.del()
    return ret
  }
  // set position of file
  file.setPos(0 as USize)
  if flags & O_APPEND {
    var state: FileState
    let ret = node.fstat(state)
    if ret != 0 {
      vfsClose(node)
      file.del()
      return ret
    }
    file.setPos(state.getSize())
  }
  // update file descriptor
  file.setNode(node)
  file.setReadable(readable)
  file.setWritable(writable)
  file.open()
  file.getFd()
}

// close an opened file by file descriptor
public def closeFile(fd: i32): i32 {
  let file_ptr = getCurrentFile(fd), file: File var& = *file_ptr
  if file_ptr == null as File var* {
    return -1
  }
  // close file
  file.close()
  0
}

// read from a file to buffer by file descriptor
public def readFile(fd: i32, buf: u8 var*, len: USize): i32 {
  let file_ptr = getCurrentFile(fd), file: File var& = *file_ptr
  if file_ptr == null as File var* {
    return -1
  }
  // check if is readable
  if !file.isReadable() {
    return -1
  }
  // acquire file
  file.incCounter()
  // read content to IO buffer
  var iob = newIoBuf(buf, len, file.getPos())
  let ret = file.getNode().read(iob)
  // update position
  let copied = iob.getUsedLen()
  if file.isOpened() {
    file.setPos(file.getPos() + copied)
  }
  // release file
  file.decCounter()
  if copied != 0 as USize {
    copied
  }
  else {
    ret
  }
}

// write buffer to a file by file descriptor
public def writeFile(fd: i32, buf: u8*, len: USize): i32 {
  let file_ptr = getCurrentFile(fd), file: File var& = *file_ptr
  if file_ptr == null as File var* {
    return -1
  }
  // check if is writable
  if !file.isWritable() {
    return -1
  }
  // acquire file
  file.incCounter()
  // write content of IO buffer to file
  var iob = newIoBuf(buf, len, file.getPos())
  let ret = file.getNode().write(iob)
  // update position
  let copied = iob.getUsedLen()
  if file.isOpened() {
    file.setPos(file.getPos() + copied)
  }
  // release file
  file.decCounter()
  if copied != 0 as USize {
    copied
  }
  else {
    ret
  }
}
