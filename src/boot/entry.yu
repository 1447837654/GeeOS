import arch.arch
import lib.io
import lib.except
import lib.elf
import lib.c.string

// boot from specific address
extern declare jumpToAddr: (u8*)
def boot(addr: u8*) {
  io <<< "booting...\n\n"
  jumpToAddr(addr)
}

// load ELF file from flash to memory
def loadElfFromFlash(): u8* {
  // get ELF file from flash
  let elf = newElfFile(FLASH_ADDR as u8*)
  let ehdr = elf.getEhdr()
  if !ehdr.isValid() {
    panic("invalid ELF file")
  }
  // copy ELF to RAM
  io <<< "loading ELF...\n"
  for phdr in elf.getPhdrIter() {
    let dst = phdr.getPaddr() as u8 var*
    let src = elf.getPhdrData(phdr)
    memcpy(dst, src, phdr.getFileSize() as USize)
  }
  // get address of entry
  let phdr = elf.getPhdr()
  let off = phdr.getVaddr() - phdr.getPaddr()
  (ehdr.getEntry() - off) as u8*
}

extern def entry() {
  initIO()
  io <<< "GeeOS bootloader v0.0.1\n"
  let addr = loadElfFromFlash()
  io <<< "exiting bootloader...\n"
  boot(addr)
}

extern def handleTrap(mepc: u32, mcause: u32, mtval: u32) {
  // display messsage
  io <<< "  mepc:   0x" <<$ mepc <<< '\n'
  io <<< "  mcause: 0x" <<$ mcause <<< '\n'
  io <<< "  mtval:  0x" <<$ mtval <<< '\n'
  panic("unexpected trap occurred while booting!")
}
