public import define.context

import arch.arch
import arch.riscv.consts
import arch.riscv.csr
import mem.pm
import lib.except

// size of kernel stack
// must be page size because stack is allocated by frame allocator
let STACK_SIZE  = PAGE_SIZE as USize

// definition of kernel thread stack
public struct KernelStack {
  addr: u8 var*,
}

// create new kernel stack
public def newKernelStack(): KernelStack {
  let addr = allocPhyMem()
  assert(addr as i32 != 0, "newKernelStack - OOM")
  [KernelStack] {addr}
}

// release kernel stack
public def del(this: KernelStack var&) {
  if this.addr as i32 != 0 {
    freePhyMem(this.addr)
  }
  this.addr = null as u8 var*
}

// get top of kernel stack
public def getTop(this: KernelStack&): u8 var* {
  this.addr + STACK_SIZE
}

// definition of thread
public struct Thread {
  context: Context,
  kstack: KernelStack,
}

// create new idle thread
public def newIdleThread(): Thread {
  [Thread] {newNullContext(), newKernelStack()}
}

// create new kernel thread
public def newKernelThread(entry: ThreadEntry, arg: USize): Thread {
  let kstack = newKernelStack()
  [Thread] {
    newKernelContext(entry, arg, kstack.getTop(), getSatp()),
    kstack,
  }
}

// release current thread structure
public def del(this: Thread var&) {
  this.kstack.del()
}

// switch to target thread
public def switchTo(this: Thread var&, target: Thread var&) {
  this.context.switchTo(target.context)
}

// move content of this thread to another thread, and clear current thread
// like 'std::move' in C++
public def move(this: Thread var&): Thread {
  let thread = this
  this.context = newNullContext()
  this.kstack.addr = null as u8 var*
  thread
}

// definition of thread status
public enum Status {
  Unused,
  Ready,
  Running,
  Sleeping,
  Exited,
}

// definition of thread status with code
public struct StatusCode {
  status: Status,
  code: USize,
}
