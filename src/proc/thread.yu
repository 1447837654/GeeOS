public import arch.arch
public import proc.consts
public import proc.structs

import proc.processor
import lib.io
import arch.riscv.csr

// first user program, defined in 'init.S'
extern declare _user_img_start: ()

// current processor
var cpu: Processor var*

def helloThread(arg: USize) {
  io <<< "hello thread\n"
  io <<< "arg is " <<< arg <<< '\n'
  // do something
  var i = 0
  while i < 100 {
    io <<< arg <<< arg <<< arg <<< arg <<< arg <<< arg <<< '\n'
    var j = 0
    while j < 1000 {
      j += 1
    }
    i += 1
  }
  // exit thread
  io <<< "end of thread " <<< arg <<< '\n'
  cpu.exit(0 as USize)
}

public def initThread() {
  // initialize cpu
  cpu = newProcessor(TIME_SLICE)
  // create kernel threads
  var i = 0
  while i < 5 {
    let hello = newKernelThread(helloThread as USize)
    hello.appendInitArgs([USize[3]] {i as USize})
    cpu.addThread(hello)
    i += 1
  }
  // create user threads
  let user = newUserThread(_user_img_start as u8*)
  cpu.addThread(user)
}

// turn interrupt on and run scheduler on current CPU
public def runCpu() {
  setIntrOn()
  cpu.run()
}

public def tick() {
  cpu.tick()
}

public def exit(code: USize) {
  cpu.exit(code)
}

public def yield() {
  cpu.yield()
}

public def wakeUp(tid: Tid) {
  cpu.wakeUp(tid)
}

public def getCurrentTid(): Tid {
  cpu.getCurrentTid()
}

public def getCurrentThread(): Thread var* {
  cpu.getCurrentThread()
}
