public import proc.pool
public import proc.structs

import arch.arch
import arch.riscv.csr
import sync.intr
import lib.io

// model of processor
// objects of this structure will always be allocated on the heap
public struct Processor {
  // thread pool
  pool: ThreadPool,
  // idle thread
  idle: Thread,
  // current thread id
  current_tid: Tid,
  // current thread
  current_thread: Thread var*,
  // is timer interrupt happened
  is_tick: bool,
}

// initialize processor
public def init(this: Processor var*, max_time: USize) {
  (*this).pool.init(max_time)
  (*this).idle = newIdleThread()
  (*this).current_thread = null as Thread var*
  (*this).is_tick = false
}

// add thread to processor
public def addThread(this: Processor var*, thread: Thread) {
  (*this).pool.add(thread)
}

// run current processor
public def run(this: Processor var*) {
  // turn off interrupts to prevent sync problem
  setIntrOff()
  // perform thread switching
  while true {
    // try to acquire next runnable thread
    var thread = (*this).pool.acquire((*this).current_tid)
    if thread != null as Thread var* {
      // update current thread
      (*this).current_thread = thread
      // switch to target thread
      (*this).idle.switchTo(*thread)
      // thread exited or run out of time slice, switch back to idle
      // TODO: remove this log
      io <<< "thread " <<< (*this).current_tid <<< " ran just now\n"
      // retrieve last thread to pool
      (*this).pool.retrieve((*this).current_tid, thread)
      (*this).current_thread = null as Thread var*
    }
    else {
      // enable interrupt
      setIntrOn()
      // wait for next tick
      while !(*this).is_tick {
        asm { "wfi" }
      }
      (*this).is_tick = false
      // disable interrupt and find next thread
      setIntrOff()
    }
  }
}

// tell processor a tick passed
// will be called by timer interrupt handler
public def tick(this: Processor var*) {
  if (*this).current_thread != null as Thread var* {
    pushOff()
    (*(*this).current_thread).switchTo((*this).idle)
    popOff()
  }
  else {
    (*this).is_tick = true
  }
}

// exit current thread
public def exit(this: Processor var*, code: USize) {
  // tell pool a thread just exited
  (*this).pool.exit((*this).current_tid, code)
  // switch to idle thread
  (*(*this).current_thread).switchTo((*this).idle)
  while true {}
}
