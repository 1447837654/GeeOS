import arch.arch
import mem.mset
import mem.consts
import mem.pm
import arch.riscv.csr

// remapping kernel address space
def remapKernel() {
  let offset = 0 as ISize
  var mset = newMemSet()
  let linear = newLinearHandler(offset)
  let handler = &linear as MemoryHandler*
  mset.push(_text_start as USize, _text_end as USize,
            newMemAttr().setExecute().setReadonly(), handler)
  mset.push(_rodata_start as USize, _rodata_end as USize,
            newMemAttr().setReadonly(), handler)
  mset.push(_data_start as USize, _data_end as USize,
            newMemAttr(), handler)
  mset.push(_bss_start as USize, _bss_end as USize,
            newMemAttr(), handler)
  mset.push(_stack_start as USize, _stack_end as USize,
            newMemAttr(), handler)
  mset.push(UART_ADDR as USize, UART_END as USize,
            newMemAttr(), handler)
  mset.push(CLINT_ADDR as USize, CLINT_END as USize,
            newMemAttr(), handler)
  mset.activate()
}

public def initMem() {
  // enable user memory access in S-mode
  setSstatus(getSstatus() | SSTATUS_SUM)
  // initialize phyical memory
  initPhyMem()
  // remap kernel
  remapKernel()
}
