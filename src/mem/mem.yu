import arch.arch
import mem.pm
import mem.paging

// position definitions in 'linker.ld'
extern declare _text_start: ()
extern declare _text_end: ()
extern declare _rodata_start: ()
extern declare _rodata_end: ()
extern declare _data_start: ()
extern declare _data_end: ()
extern declare _bss_start: ()
extern declare _bss_end: ()
extern declare _stack_start: ()
extern declare _stack_end: ()

// remapping kernel address space
def remapKernel() {
  var page_table = newPageTable(0 as USize)
  page_table.set(_text_start as USize, _text_end as USize,
                 newMemAttr().setRead().setExec())
  page_table.set(_rodata_start as USize, _rodata_end as USize,
                 newMemAttr().setRead())
  page_table.set(_data_start as USize, _data_end as USize,
                 newMemAttr().setWR())
  page_table.set(_bss_start as USize, _bss_end as USize,
                 newMemAttr().setWR())
  page_table.set(_stack_start as USize, _stack_end as USize,
                 newMemAttr().setWR())
  page_table.set(UART_ADDR as USize, UART_END as USize,
                 newMemAttr().setWR())
  page_table.set(CLINT_ADDR as USize, CLINT_END as USize,
                 newMemAttr().setWR())
  page_table.activate()
}

public def initMem() {
  // enable user memory access in S-mode
  setSstatus(getSstatus() | SSTATUS_SUM)
  // initialize phyical memory
  initPhyMem()
  // // remap kernel
  // remapKernel()
}
