/*

all architectures must define the following types:

- USize: pointer-sized unsigned integer type
- ISize: pointer-sized signed integer type

all architectures must define the following constants:

- FLASH_ADDR: i32:  boot flash address, used by the bootloader
- MEM_ADDR: i32:    physical memory start address

all architectures must define the following functions:

- initIO: ():       initialize IO driver (like UART)
- putChar: (u8):    put a character to IO
- getChar: (): i32: get a character from IO
- halt: (i32):      halt the CPU, and return exit code (if possible)

*/


// use this architecture as target
public import arch.virt

// some constants about RISC-V
// machine status register
inline let MSTATUS_MPP_MASK = (3 << 11) as USize
inline let MSTATUS_MPP_M    = (3 << 11) as USize
inline let MSTATUS_MPP_S    = (1 << 11) as USize
inline let MSTATUS_MPP_U    = (0 << 11) as USize
inline let MSTATUS_MIE      = (1 << 3) as USize
// supervisor status register
inline let SSTATUS_SPP      = (1 << 8) as USize
inline let SSTATUS_SPIE     = (1 << 5) as USize
inline let SSTATUS_UPIE     = (1 << 4) as USize
inline let SSTATUS_SIE      = (1 << 1) as USize
inline let SSTATUS_UIE      = (1 << 0) as USize
// supervisor interrupt enable
inline let SIE_SEIE         = (1 << 9) as USize
inline let SIE_STIE         = (1 << 5) as USize
inline let SIE_SSIE         = (1 << 1) as USize
// machine-mode interrupt enable
inline let MIE_MEIE         = (1 << 11) as USize
inline let MIE_MTIE         = (1 << 7) as USize
inline let MIE_MSIE         = (1 << 3) as USize

// declarations of functions in 'arch.S'
extern declare getMstatus: (): USize
extern declare setMstatus: (USize)
extern declare setMepc: (USize)
extern declare getSstatus: (): USize
extern declare setSstatus: (USize)
extern declare getSip: (): USize
extern declare setSip: (USize)
extern declare getSie: (): USize
extern declare setSie: (USize)
extern declare getMie: (): USize
extern declare setMie: (USize)
extern declare setSepc: (USize)
extern declare getSepc: (): USize
extern declare getMedeleg: (): USize
extern declare setMedeleg: (USize)
extern declare getMideleg: (): USize
extern declare setMideleg: (USize)
extern declare setStvec: (USize)
extern declare getStvec: (): USize
extern declare setMtvec: (USize)
extern declare setSatp: (USize)
extern declare getSatp: (): USize
extern declare setSscratch: (USize)
extern declare setMscratch: (USize)
extern declare getScause: (): USize
extern declare getStval: (): USize
extern declare getSp: (): USize
extern declare getRa: (): USize
extern declare runSfence: ()

// just halt, returns nothing
inline def halt() {
  halt(0)
}

// enable devide interrupts
inline def setIntrOn() {
  setSie(getSie() | SIE_SEIE | SIE_STIE | SIE_SEIE)
  setSstatus(getSstatus() | SSTATUS_SIE)
}

// disable device interrupts
inline def setIntrOff() {
  setSstatus(getSstatus() & ~SSTATUS_SIE)
}

// check if device interrupts are enabled
inline def getIntr(): bool {
  (getSstatus() & SSTATUS_SIE) != 0 as USize
}
